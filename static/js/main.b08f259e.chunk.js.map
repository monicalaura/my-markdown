{"version":3,"sources":["components/Header.js","components/MyMarkdown.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","marked","require","MyMarkdown","state","markdown","writeMarkdown","this","setState","rows","cols","type","value","onChange","event","target","id","dangerouslySetInnerHTML","__html","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2OAYiBA,G,kBAVF,kBACX,4BAAQC,UAAU,aAChB,wBAAIA,UAAU,qBACd,uBAAGA,UAAU,gBADb,kB,wCCDFC,EAASC,EAAQ,IAoDJC,E,2MAhDXC,MAAQ,CACNC,SAAS,wjC,EAcbC,cAAgB,SAASD,GACvBE,KAAKC,SAAS,CACZH,c,wEAOM,IAAD,OACHA,EAAYE,KAAKH,MAAjBC,SACJ,OAAQ,yBAAKL,UAAU,OACb,yBAAKA,UAAU,YACZ,wBAAIA,UAAU,eAAd,SACD,8BAAUS,KAAK,KAAKC,KAAK,KACvBC,KAAK,OACLC,MAAOP,EACPQ,SAAU,SAACC,GAAD,OAAW,EAAKR,cAAcQ,EAAMC,OAAOH,QACrDI,GAAG,SACHhB,UAAU,eAIZ,yBAAKiB,wBAAyB,CAACC,OAAOjB,EAAOI,IAAaW,GAAG,UAAUhB,UAAU,8B,GAxC1EmB,IAAMC,WCchBC,MAZf,WACE,OACE,6BACE,kBAAC,EAAD,MACJ,yBAAKrB,UAAU,mBACb,kBAAC,EAAD,SCAgBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b08f259e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Header = () => (\r\n    <header className='jumbotron'>\r\n      <h1 className='text-center title'>   \r\n      <i className=\"fas fa-code\"></i>   \r\n      My Markdown \r\n      </h1>\r\n   \r\n    </header>\r\n  );\r\n\r\n  export default Header","import React, { Component } from 'react';\r\nimport Form from 'react-bootstrap/Form';\r\nimport FormControl from 'react-bootstrap/FormControl';\r\nlet marked = require('marked');\r\n\r\nclass MyMarkdown extends React.Component {\r\n   \r\n      state = {\r\n        markdown:  `\\n# Heading1\\n## Heading2\\n### Heading 3\\n---\\\r\n        \\n#### I am a smaller heading\\n \\n Paragraphs are separated\\nby a \r\n       blank line.\\n\\nLeave 2 spaces at the end of a line to do a  \\nline\r\n        break\\n\\nText attributes *italic*, **bold**, or, wow... **_both italic and bold!_** \\n\r\n        .\\n\\nUnordered list:\\n\\n  * bananas\\n  * kiwi\\n  * oranges\\n\r\n        \\n\\nNumbered list:\\n\\n  1. milk\\n  2. eggs\\n  3. butter\\n \r\n        Hey, you can also ~~cross things out~~.\r\n        \\n### More awesome stuff\\n Inline code:\\nFrom the console, run <code>console.log('Hello world!');</code>to see the output. \\n\\n---\\n\\n#### Code block:<code>\\n javascript\\nfunction sayHello() {\\n return 'Hello world!';\\n}</code>\\n\\n---\\n\\n#### \r\n         \\n#### Blockquote:  \\n> Simplicity is about subtracting the obvious and adding the meaningful. -John Maeda \\n\\n---\\n#### \r\n         \\n Some code \\`<div></div>\\`  \\`<pre></pre>\\` between 2 backticks.\\n There's also a [link](https://www.google.com)\\n\r\nLife is more beautiful with embedded images:![React Logo w/ Text](https://goo.gl/Umyytc) `\r\n     \r\n    }\r\n  \r\n    writeMarkdown = function(markdown){\r\n      this.setState({\r\n        markdown\r\n      });\r\n\r\n\r\n\r\n    }\r\n  \r\n    render() {\r\n     let {markdown} = this.state;\r\n      return (<div className='row'>\r\n                <div className='col-md-6'>\r\n                   <h4 className=\"text-center\">Input</h4>\r\n                  <textarea rows=\"20\" cols=\"60\"\r\n                    type='text'\r\n                    value={markdown}\r\n                    onChange={(event) => this.writeMarkdown(event.target.value)}\r\n                    id='editor'\r\n                    className='col-xs-10'>\r\n                    </textarea>\r\n                </div>\r\n              \r\n                  <div dangerouslySetInnerHTML={{__html:marked(markdown)}}  id='preview' className=' col-md-6 col-xs-10 '>\r\n                         \r\n                    \r\n                  </div>\r\n                </div>\r\n              \r\n        );\r\n    }\r\n  }\r\n\r\n  export default MyMarkdown","import React from 'react';\nimport './App.scss';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Header from './components/Header';\nimport MyMarkdown from './components/MyMarkdown';\n\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n  <div className=\"container-fluid\">\n    <MyMarkdown />\n    </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}